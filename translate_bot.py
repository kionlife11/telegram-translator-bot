import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from deep_translator import GoogleTranslator

user_languages = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞–Ω–Ω—è! –ù–∞–¥—ñ—à–ª—ñ—Ç—å /translate —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏.\n"
        "–ê–±–æ /setlang [–∫–æ–¥_–º–æ–≤–∏], —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É."
    )

async def setlang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setlang <–∫–æ–¥_–º–æ–≤–∏> (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /setlang uk)")
        return

    lang = context.args[0].lower()
    user_languages[update.effective_user.id] = lang
    await update.message.reply_text(f"‚úÖ –ú–æ–≤–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {lang}")

async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    target_lang = user_languages.get(user_id, 'uk')

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
    if update.message.reply_to_message and update.message.reply_to_message.text:
        text_to_translate = update.message.reply_to_message.text
    else:
        text_to_translate = " ".join(context.args)

    if not text_to_translate:
        await update.message.reply_text("‚ùó –ù–∞–ø–∏—à—ñ—Ç—å /translate —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.")
        return

    try:
        # Deep-translator –Ω–µ —Ä–æ–±–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏, —Ç–æ–º—É –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ GoogleTranslator –∑ source='auto'
        translated_text = GoogleTranslator(source='auto', target=target_lang).translate(text_to_translate)
        await update.message.reply_text(
            f"üîÅ –ü–µ—Ä–µ–∫–ª–∞–¥ (‚Üí {target_lang}):\n{translated_text}"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}")

def main():
    app = ApplicationBuilder().token(os.environ["TELEGRAM_TOKEN"]).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setlang", setlang))
    app.add_handler(CommandHandler("translate", translate))
    app.run_polling()

if __name__ == "__main__":
    main()
